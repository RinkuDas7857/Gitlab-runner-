// Code generated by mockery v2.28.2. DO NOT EDIT.

package service

import (
	context "context"

	common "gitlab.com/gitlab-org/gitlab-runner/common"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"

	secretmanagerpb "cloud.google.com/go/secretmanager/apiv1/secretmanagerpb"
)

// mockService is an autogenerated mock type for the service type
type mockService struct {
	mock.Mock
}

// access provides a mock function with given fields: ctx, secret, source
func (_m *mockService) access(ctx context.Context, secret *common.GCPSecretManagerSecret, source oauth2.TokenSource) (*secretmanagerpb.AccessSecretVersionResponse, error) {
	ret := _m.Called(ctx, secret, source)

	var r0 *secretmanagerpb.AccessSecretVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.GCPSecretManagerSecret, oauth2.TokenSource) (*secretmanagerpb.AccessSecretVersionResponse, error)); ok {
		return rf(ctx, secret, source)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.GCPSecretManagerSecret, oauth2.TokenSource) *secretmanagerpb.AccessSecretVersionResponse); ok {
		r0 = rf(ctx, secret, source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretmanagerpb.AccessSecretVersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.GCPSecretManagerSecret, oauth2.TokenSource) error); ok {
		r1 = rf(ctx, secret, source)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// newMockService creates a new instance of mockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockService(t mockConstructorTestingTnewMockService) *mockService {
	mock := &mockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
