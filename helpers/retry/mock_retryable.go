// Code generated by mockery v2.28.2. DO NOT EDIT.

package retry

import mock "github.com/stretchr/testify/mock"

// mockRetryable is an autogenerated mock type for the retryable type
type mockRetryable struct {
	mock.Mock
}

// Run provides a mock function with given fields:
func (_m *mockRetryable) Run() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShouldRetry provides a mock function with given fields: tries, err
func (_m *mockRetryable) ShouldRetry(tries int, err error) bool {
	ret := _m.Called(tries, err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, error) bool); ok {
		r0 = rf(tries, err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTnewMockRetryable interface {
	mock.TestingT
	Cleanup(func())
}

// newMockRetryable creates a new instance of mockRetryable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockRetryable(t mockConstructorTestingTnewMockRetryable) *mockRetryable {
	mock := &mockRetryable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
