// Code generated by mockery v1.0.0. DO NOT EDIT.

// This comment works around https://github.com/vektra/mockery/issues/155

package debug

import http "net/http"
import mock "github.com/stretchr/testify/mock"
import net "net"
import prometheus "github.com/prometheus/client_golang/prometheus"

// MockServer is an autogenerated mock type for the Server type
type MockServer struct {
	mock.Mock
}

// RegisterDebugEndpoint provides a mock function with given fields: path, handlerFn
func (_m *MockServer) RegisterDebugEndpoint(path string, handlerFn http.HandlerFunc) {
	_m.Called(path, handlerFn)
}

// RegisterDebugEndpoints provides a mock function with given fields: endpoints
func (_m *MockServer) RegisterDebugEndpoints(endpoints EndpointsMap) {
	_m.Called(endpoints)
}

// RegisterPrometheusCollector provides a mock function with given fields: collector
func (_m *MockServer) RegisterPrometheusCollector(collector prometheus.Collector) error {
	ret := _m.Called(collector)

	var r0 error
	if rf, ok := ret.Get(0).(func(prometheus.Collector) error); ok {
		r0 = rf(collector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterPrometheusCollectors provides a mock function with given fields: collectors
func (_m *MockServer) RegisterPrometheusCollectors(collectors CollectorsMap) error {
	ret := _m.Called(collectors)

	var r0 error
	if rf, ok := ret.Get(0).(func(CollectorsMap) error); ok {
		r0 = rf(collectors)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: listener
func (_m *MockServer) Start(listener net.Listener) error {
	ret := _m.Called(listener)

	var r0 error
	if rf, ok := ret.Get(0).(func(net.Listener) error); ok {
		r0 = rf(listener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
