// Code generated by mockery v1.0.0. DO NOT EDIT.

// This comment works around https://github.com/vektra/mockery/issues/155

package debug

import io_prometheus_client "github.com/prometheus/client_model/go"
import mock "github.com/stretchr/testify/mock"
import prometheus "github.com/prometheus/client_golang/prometheus"

// mockPrometheusRegistry is an autogenerated mock type for the prometheusRegistry type
type mockPrometheusRegistry struct {
	mock.Mock
}

// Gather provides a mock function with given fields:
func (_m *mockPrometheusRegistry) Gather() ([]*io_prometheus_client.MetricFamily, error) {
	ret := _m.Called()

	var r0 []*io_prometheus_client.MetricFamily
	if rf, ok := ret.Get(0).(func() []*io_prometheus_client.MetricFamily); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*io_prometheus_client.MetricFamily)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: collector
func (_m *mockPrometheusRegistry) Register(collector prometheus.Collector) error {
	ret := _m.Called(collector)

	var r0 error
	if rf, ok := ret.Get(0).(func(prometheus.Collector) error); ok {
		r0 = rf(collector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
