// Code generated by mockery v1.0.0. DO NOT EDIT.

package process

import mock "github.com/stretchr/testify/mock"
import os "os"
import syscall "syscall"

// MockCommander is an autogenerated mock type for the Commander type
type MockCommander struct {
	mock.Mock
}

// Process provides a mock function with given fields:
func (_m *MockCommander) Process() *os.Process {
	ret := _m.Called()

	var r0 *os.Process
	if rf, ok := ret.Get(0).(func() *os.Process); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.Process)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *MockCommander) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SysProcAttr provides a mock function with given fields:
func (_m *MockCommander) SysProcAttr() *syscall.SysProcAttr {
	ret := _m.Called()

	var r0 *syscall.SysProcAttr
	if rf, ok := ret.Get(0).(func() *syscall.SysProcAttr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*syscall.SysProcAttr)
		}
	}

	return r0
}

// Wait provides a mock function with given fields:
func (_m *MockCommander) Wait() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
