// Code generated by mockery v1.0.0

// This comment works around https://github.com/vektra/mockery/issues/155

package common

import mock "github.com/stretchr/testify/mock"
import network "gitlab.com/gitlab-org/gitlab-runner/core/network"

// MockNetwork is an autogenerated mock type for the Network type
type MockNetwork struct {
	mock.Mock
}

// PatchTrace provides a mock function with given fields: config, jobCredentials, tracePart
func (_m *MockNetwork) PatchTrace(config RunnerConfig, jobCredentials *network.JobCredentials, tracePart JobTracePatch) UpdateState {
	ret := _m.Called(config, jobCredentials, tracePart)

	var r0 UpdateState
	if rf, ok := ret.Get(0).(func(RunnerConfig, *network.JobCredentials, JobTracePatch) UpdateState); ok {
		r0 = rf(config, jobCredentials, tracePart)
	} else {
		r0 = ret.Get(0).(UpdateState)
	}

	return r0
}

// ProcessJob provides a mock function with given fields: config, buildCredentials
func (_m *MockNetwork) ProcessJob(config RunnerConfig, buildCredentials *network.JobCredentials) JobTrace {
	ret := _m.Called(config, buildCredentials)

	var r0 JobTrace
	if rf, ok := ret.Get(0).(func(RunnerConfig, *network.JobCredentials) JobTrace); ok {
		r0 = rf(config, buildCredentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(JobTrace)
		}
	}

	return r0
}

// RegisterRunner provides a mock function with given fields: config, description, tags, runUntagged, locked
func (_m *MockNetwork) RegisterRunner(config RunnerCredentials, description string, tags string, runUntagged bool, locked bool) *RegisterRunnerResponse {
	ret := _m.Called(config, description, tags, runUntagged, locked)

	var r0 *RegisterRunnerResponse
	if rf, ok := ret.Get(0).(func(RunnerCredentials, string, string, bool, bool) *RegisterRunnerResponse); ok {
		r0 = rf(config, description, tags, runUntagged, locked)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterRunnerResponse)
		}
	}

	return r0
}

// RequestJob provides a mock function with given fields: config
func (_m *MockNetwork) RequestJob(config RunnerConfig) (*JobResponse, bool) {
	ret := _m.Called(config)

	var r0 *JobResponse
	if rf, ok := ret.Get(0).(func(RunnerConfig) *JobResponse); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JobResponse)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(RunnerConfig) bool); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// UnregisterRunner provides a mock function with given fields: config
func (_m *MockNetwork) UnregisterRunner(config RunnerCredentials) bool {
	ret := _m.Called(config)

	var r0 bool
	if rf, ok := ret.Get(0).(func(RunnerCredentials) bool); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateJob provides a mock function with given fields: config, jobCredentials, jobInfo
func (_m *MockNetwork) UpdateJob(config RunnerConfig, jobCredentials *network.JobCredentials, jobInfo UpdateJobInfo) UpdateState {
	ret := _m.Called(config, jobCredentials, jobInfo)

	var r0 UpdateState
	if rf, ok := ret.Get(0).(func(RunnerConfig, *network.JobCredentials, UpdateJobInfo) UpdateState); ok {
		r0 = rf(config, jobCredentials, jobInfo)
	} else {
		r0 = ret.Get(0).(UpdateState)
	}

	return r0
}

// VerifyRunner provides a mock function with given fields: config
func (_m *MockNetwork) VerifyRunner(config RunnerCredentials) bool {
	ret := _m.Called(config)

	var r0 bool
	if rf, ok := ret.Get(0).(func(RunnerCredentials) bool); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
