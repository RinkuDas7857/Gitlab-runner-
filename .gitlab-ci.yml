.go-cache:
  before_script:
    - mkdir -p "$GOCACHE"
  cache:
    key: ${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}
    paths:
      - $CI_PROJECT_DIR/.gocache-false/
  variables:
    GOCACHE: $CI_PROJECT_DIR/.gocache-$CI_COMMIT_REF_PROTECTED
.no_cache:
  cache: {}
.no_dependencies:
  dependencies: []
.rules:merge_request_pipelines:no_docs:
  rules:
    - changes:
        - .gitlab-ci.yml
        - .golangci.yml
        - .gitlab/ci/**/*
        - .gitattributes
        - Makefile*
        - '**/*.go'
        - '{ci,dockerfiles,packaging,scripts,tests}/**/*'
        - '**/testdata/**/*'
        - go.*
        - tmp/gitlab-test/**
        - VERSION
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - changes:
        - .gitlab-ci.yml
        - .golangci.yml
        - .gitlab/ci/**/*
        - .gitattributes
        - Makefile*
        - '**/*.go'
        - '{ci,dockerfiles,packaging,scripts,tests}/**/*'
        - '**/testdata/**/*'
        - go.*
        - tmp/gitlab-test/**
        - VERSION
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && ($CI_PROJECT_PATH == "gitlab-org/gitlab-runner"
        || $CI_PROJECT_PATH == "gitlab-org/security/gitlab-runner")
    - changes:
        - .gitlab-ci.yml
        - .golangci.yml
        - .gitlab/ci/**/*
        - .gitattributes
        - Makefile*
        - '**/*.go'
        - '{ci,dockerfiles,packaging,scripts,tests}/**/*'
        - '**/testdata/**/*'
        - go.*
        - tmp/gitlab-test/**
        - VERSION
      if: $CI_COMMIT_REF_NAME =~ /\A[0-9]+-[0-9]+-stable\z/ && ($CI_PROJECT_PATH ==
        "gitlab-org/gitlab-runner" || $CI_PROJECT_PATH == "gitlab-org/security/gitlab-runner")
    - changes:
        - .gitlab-ci.yml
        - .golangci.yml
        - .gitlab/ci/**/*
        - .gitattributes
        - Makefile*
        - '**/*.go'
        - '{ci,dockerfiles,packaging,scripts,tests}/**/*'
        - '**/testdata/**/*'
        - go.*
        - tmp/gitlab-test/**
        - VERSION
      if: $CI_COMMIT_REF_NAME =~ /\Av[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?\z/ && $CI_PROJECT_PATH
        == "gitlab-org/gitlab-runner"
    - changes:
        - .gitlab-ci.yml
        - .golangci.yml
        - .gitlab/ci/**/*
        - .gitattributes
        - Makefile*
        - '**/*.go'
        - '{ci,dockerfiles,packaging,scripts,tests}/**/*'
        - '**/testdata/**/*'
        - go.*
        - tmp/gitlab-test/**
        - VERSION
      if: $CI_COMMIT_REF_NAME =~ /\Av[0-9]+\.[0-9]+\.[0-9]+?\z/ && $CI_PROJECT_PATH
        == "gitlab-org/security/gitlab-runner"
code_quality:
  allow_failure: true
  artifacts:
    expire_in: 7d
    paths:
      - ${REPORT_FILE}
    reports:
      codequality: ${REPORT_FILE}
    when: always
  before_script:
    - source ci/touch_make_dependencies
    - mkdir .tmp && ln -s /usr/lib/goargs.so .tmp/goargs.so
    - cp $(which golangci-lint) .tmp/golangci-lint
  extends:
    - .rules:merge_request_pipelines:no_docs
    - .no_dependencies
    - .go-cache
  image: registry.gitlab.com/gitlab-org/ci-cd/runner-tools/runner-linters:1.46.2-go1.18
  needs: []
  script:
    - make --silent lint | tee ${REPORT_FILE}
  stage: test
  timeout: 15 minutes
  variables:
    GOLANGLINT_VERSION: ""
    LINT_FLAGS: --color never --deadline 15m
    OUT_FORMAT: code-climate
    REPORT_FILE: gl-code-quality-report.json
default:
  image: $CI_IMAGE
  retry:
    max: 2
    when:
      - runner_system_failure
  tags:
    - gitlab-org
stages:
  - prepare
  - fips helper binaries
  - prebuild
  - prerelease
  - test
  - coverage
  - build
  - package
  - release
  - postrelease
  - docs
static QA:
  extends:
    - .rules:merge_request_pipelines:no_docs
    - .no_cache
  image: alpine:3.14.2
  needs:
    - code_quality
  script: |
    if [ "$(cat gl-code-quality-report.json)" != "[]" ] ; then
      apk add -U --no-cache jq > /dev/null
      jq -C . gl-code-quality-report.json
      exit 1
    fi
  stage: postrelease
variables:
  ALPINE_312_VERSION: 3.12.12
  ALPINE_313_VERSION: 3.13.12
  ALPINE_314_VERSION: 3.14.8
  ALPINE_315_VERSION: 3.15.6
  AWS_CLI_VERSION: 2.4.19
  BUILDX_VERSION: 0.7.1
  CI_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/ci:1.18.8-1
  DEPENDENCY_SCANNING_DISABLED: "true"
  DOCKER_MACHINE_VERSION: 0.16.2
  DOCKER_VERSION: 20.10.12
  DOCS_GITLAB_REPO_SUFFIX: runner
  DUMB_INIT_VERSION: 1.2.2
  FF_SCRIPT_SECTIONS: "true"
  FF_USE_FASTZIP: "true"
  FF_USE_NEW_BASH_EVAL_STRATEGY: "true"
  GIT_LFS_VERSION: 3.2.0
  GIT_VERSION: 2.38.1
  GIT_VERSION_BUILD: "1"
  GO_FIPS_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/go-fips:$GO_FIPS_VERSION
  GO_FIPS_VERSION: "1.18"
  GO111MODULE: "on"
  KUBECTL_VERSION: 1.23.0
  LICENSE_MANAGEMENT_SETUP_CMD: echo "Skip setup. Dependency already vendored"
  RELEASE_INDEX_GEN_VERSION: latest
  SAST_DISABLED: "true"
  TRANSFER_METER_FREQUENCY: 5s
  UBI_FIPS_VERSION: 8.7-929
  UBUNTU_VERSION: "20.04"
