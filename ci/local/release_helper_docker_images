#!/usr/bin/env bash

set -eEo pipefail

SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"

# shellcheck source=ci/docker_commands
source "${SCRIPTPATH}/docker_commands"

IMAGE_FLAVOR=${IMAGE_FLAVOR:-"alpine"}
IMAGE_TAG=${IMAGE_TAG:-""}

tag_latest() {
    if [[ -z "${IS_LATEST}" ]]; then
        return
    fi

    tag "${@}"
}

push_latest() {
    if [[ -z "${IS_LATEST}" ]]; then
        return
    fi

    push "${@}"
}

# Release the helper images.
# The first passed argument will be used as a
# prefix for the image name, which is useful to push do a different registry.
# For example `registry.gitlab.com/gitlab-org/gitlab-runner` and `gitlab`.
# This function will perform all actions needed for pushing except for the
# pushing itself depending on the `PUBLISH_IMAGES` and `PUSH_TO_ECR_PUBLIC` variables
# which is checked inside the `push` function.
# The second argument tells if the push is actually enabled.
# This argument is then forwarded to the `push` function.
release_docker_helper_images() {
    REGISTRY=$1
    PUSH_ENABLED=$2
    FLAVOR=$3
    PREFIX=$4
    ARCH=$5

    if [[ $ARCH == *"amd"* ]];
    then
        ARCH="x86_64"
    fi

    helper_image="${REGISTRY}/gitlab-runner-helper:${PREFIX}${ARCH}-${REVISION}"
    helper_image_pwsh="${REGISTRY}/gitlab-runner-helper:${PREFIX}${ARCH}-${REVISION}-pwsh"
    helper_image_version="${REGISTRY}/gitlab-runner-helper:${PREFIX}${ARCH}-${ref_tag}"
    helper_image_pwsh_version="${REGISTRY}/gitlab-runner-helper:${PREFIX}${ARCH}-${ref_tag}-pwsh"
    helper_image_latest="${REGISTRY}/gitlab-runner-helper:${PREFIX}${ARCH}-latest"
    helper_image_pwsh_latest="${REGISTRY}/gitlab-runner-helper:${PREFIX}${ARCH}-latest-pwsh"

    import "out/helper-images/prebuilt-${FLAVOR}-${ARCH}.tar.xz" "${helper_image}"

    tag_latest "${helper_image}" "${helper_image_latest}"

    tag "${helper_image}" "${helper_image_version}"

    push "${helper_image}" "${PUSH_ENABLED}"

    push_latest "${helper_image_latest}" "${PUSH_ENABLED}"
    push "${helper_image_version}" "${PUSH_ENABLED}"

    if [[ "$FLAVOR" != "alpine3.14" ]] && [[ "$FLAVOR" != "alpine3.15" ]] && [[ "$FLAVOR" != "alpine-latest" ]]; then
        # Special case until pwsh adds the alpine 3.14 and 3.15 docker images
        # The two versions can be removed when pwsh adds support for them but the latest flavour must stay
        # As there's no corresponding version for alpine
        # Alpine-latest is a special case pwsh don't support an alpine:latest image
        import "out/helper-images/prebuilt-${FLAVOR}-x86_64-pwsh.tar.xz" "${helper_image_pwsh}"
        tag_latest "${helper_image_pwsh}" "${helper_image_pwsh_latest}"
        tag "${helper_image_pwsh}" "${helper_image_pwsh_version}"
        push "${helper_image_pwsh}" "${PUSH_ENABLED}"
        push_latest "${helper_image_pwsh_latest}" "${PUSH_ENABLED}"
        push "${helper_image_pwsh_version}" "${PUSH_ENABLED}"
    fi
}

# Release helper images
if [[ -n "${CI_REGISTRY_USER}" ]] && [[ -n "${CI_REGISTRY_PASSWORD}" ]] && [[ "${PUBLISH_IMAGES}" == "true" ]]; then
    login "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
fi
release_docker_helper_images "${CI_REGISTRY_IMAGE}" "${PUBLISH_IMAGES}" "${IMAGE_FLAVOR}" "${IMAGE_TAG}"
logout "${CI_REGISTRY}"
